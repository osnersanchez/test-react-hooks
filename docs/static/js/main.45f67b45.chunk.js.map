{"version":3,"sources":["components/AddCategory.tsx","helpers/getGifs.ts","components/GifGridItem.tsx","components/GifGrid.tsx","hooks/useFetchGifs.ts","GifExpertApp.tsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categories","value","onChange","target","type","getGifs","category","a","fetch","encodeURI","res","json","data","map","gif","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","gifList","useFetchGif","gifs","key","GitExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMA2BeA,EArBK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAgC,EACjBC,mBAAiB,IADA,mBAC9CC,EAD8C,KAClCC,EADkC,KAUrD,OACE,0BAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACFN,GAAc,SAACO,GAAD,OAA2BL,GAA3B,mBAA0CK,OACxDJ,EAAc,MAKZ,2BACEK,MAAQN,EACRO,SAXoB,SAACJ,GAAD,OAAsCF,EAAcE,EAAEK,OAAOF,QAYjFG,KAAK,W,uBCVAC,EAAO,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,4DACJ,mCACE,uCAFE,SAGDC,MAAM,GAAD,OADN,uCACM,cAAkBC,UAAUH,GAA5B,6BAFR,qCADI,cAGbI,EAHa,gBAIIA,EAAIC,OAJR,uBAIXC,EAJW,EAIXA,KAJW,kBAKGA,EAbjBC,KAAI,SAACC,GAAD,YAAe,CACpBC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,SAKnB,4CAAH,sDCQLG,EAZK,SAAC,GAAyB,IAAvBN,EAAsB,EAAtBA,IAErB,OACE,yBAAKO,UAAU,iDACb,yBAAKA,UAAU,eACb,yBAAKC,IAAKR,EAAIG,IAAKM,IAAKT,EAAIE,SAE9B,2BAAIF,EAAIE,SCaCQ,EAlBC,SAAC,GAA8B,IAA5BlB,EAA2B,EAA3BA,SAA2B,ECLnB,SAACA,GAAsB,IAAD,EACrBZ,mBAA8B,CACtDkB,KAAM,GACNa,SAAS,IAHoC,mBACxCC,EADwC,KACjCC,EADiC,KAiB/C,OAXAC,qBAAU,WACRvB,EAAQC,GACPuB,MAAK,SAACC,GAELH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACnB,IAEGoB,EDXyBK,CAAYzB,GAA9B0B,EAD8B,EACpCpB,KAAYa,EADwB,EACxBA,QAEpB,OACE,oCACE,4BAAKnB,GACJmB,GAAW,uBAAGJ,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aAEXW,EAAKnB,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,CAAamB,IAAKnB,EAAIC,GAAID,IAAKA,UEQ5BoB,EAvBM,WAAO,IAAD,EACWxC,mBAAS,CAAC,cADrB,mBAClBM,EADkB,KACNP,EADM,KAMzB,OACE,oCACE,4CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BAEIO,EAAWa,KAAI,SAACP,GAAD,OACb,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,U,MCZ9C6B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.45f67b45.chunk.js","sourcesContent":["import React, { ChangeEvent, Dispatch, FormEvent, SetStateAction, useState } from 'react';\r\n\r\ninterface PropsTypes {\r\n  setCategories: Dispatch<SetStateAction<string[]>>\r\n}\r\n\r\nconst AddCategory = ({ setCategories }: PropsTypes) => {\r\n  const [inputValue, setInputValue] = useState<string>('');\r\n\r\n  const handleinputChange = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value);\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setCategories((categories: string[]) => [inputValue, ...categories]);\r\n    setInputValue('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmit }>\r\n      <input\r\n        value={ inputValue }\r\n        onChange={ handleinputChange }\r\n        type=\"text\"\r\n      />\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default AddCategory;","import { Gif } from \"../shared/interfaces\";\r\n\r\nconst wrapperGifList = (list: any[]): Gif[] => (\r\n    list.map((gif: any) => ({\r\n        id: gif.id,\r\n        title: gif.title,\r\n        url: gif.images?.downsized_medium.url\r\n    }))\r\n);\r\n\r\n\r\nexport const getGifs = async (category: string) => {\r\n    const apiKey = 'tELWIwGLK0fa98UbjL68820G1V1gleUi';\r\n    const endpoint = 'https://api.giphy.com/v1/gifs/search';\r\n    const res = await fetch(`${endpoint}?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`);\r\n    const { data } = await res.json();\r\n    return wrapperGifList(data);\r\n};\r\n","import React from 'react';\r\nimport { Gif } from '../shared/interfaces';\r\n\r\ninterface PropsTypes {\r\n  gif: Gif;\r\n}\r\n\r\nconst GifGridItem = ({ gif }: PropsTypes) => {\r\n\r\n  return (\r\n    <div className=\"card-item animate__animated animate__bounceIn\">\r\n      <div className=\"content-img\">\r\n        <img src={gif.url} alt={gif.title} />\r\n      </div>\r\n      <p>{gif.title}</p>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport { useFetchGif } from '../hooks/useFetchGifs';\r\nimport { Gif } from '../shared/interfaces';\r\nimport GifGridItem from './GifGridItem';\r\n\r\ninterface PropsTypes {\r\n  category: string;\r\n}\r\n\r\nconst GifGrid = ({ category }: PropsTypes) => {\r\n  const { data: gifs, loading } = useFetchGif(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n      <div className=\"card-grid\">\r\n        {\r\n          gifs.map((gif: Gif) => (\r\n            <GifGridItem key={gif.id} gif={gif} />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default GifGrid;","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nimport { Gif, ServiceRespond } from \"../shared/interfaces\";\r\n\r\nexport const useFetchGif = (category: string) => {\r\n  const [state, setState] = useState<ServiceRespond<Gif>>({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n    .then((gifList: Gif[]) => {\r\n\r\n      setState({\r\n        data: gifList,\r\n        loading: false\r\n      })\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GitExpertApp = () => {\r\n  const [categories, setCategories] = useState(['One punch']);\r\n\r\n  // const handleAdd = () => setCategories([...categories, 'Marvel']);\r\n  // const handleAdd = () => setCategories((categoriesState: string[]) => [...categoriesState, 'Marvel']);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <hr />\r\n      <AddCategory setCategories={setCategories}/>\r\n      <ol>\r\n        {\r\n          categories.map((category: string) => (\r\n            <GifGrid key={category} category={category}/>\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n};\r\n\r\n\r\nexport default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GifExpertApp';\nimport './index.css';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GitExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}